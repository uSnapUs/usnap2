// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;
using MonoTouch.CoreLocation;
using System.Linq;

namespace iPhone_FrontEnd
{
	public partial class LandingPageViewController : UIViewController
	{
		LandingPageView _landingPageView;

		CLLocationManager _locationManager;

		CLLocation _currentLocation;

		public LandingPageViewController ():base()
		{
			String fonts = "";
			List<String> fontFamilies = new List<String> (UIFont.FamilyNames);
			fontFamilies.Sort ();
			foreach (String familyName in fontFamilies) {
				foreach (String fontName in UIFont.FontNamesForFamilyName (familyName)) {
					fonts += fontName + "\n";
				}
				fonts += "\n";
			}
			Console.WriteLine (fonts);      
			_landingPageView = new LandingPageView();
			_landingPageView.FindButtonPressed+=OnFindButtonPress;
			_landingPageView.BackButtonPressed+=OnBackButtonPress;
			_landingPageView.FindNearbyButtonPressed+=OnFindNearbyButtonPress;
			this.View = _landingPageView;
		}
		public override void DidRotate (UIInterfaceOrientation fromInterfaceOrientation)
		{
			base.DidRotate (fromInterfaceOrientation);
		}
		public override bool WantsFullScreenLayout {
			get {
				return true;
			}
			set {
				base.WantsFullScreenLayout = value;
			}
		}
		public override UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()
		{
			return UIInterfaceOrientationMask.AllButUpsideDown;
		}
		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			return true;
		}

		void OnLocationUpdated (object sender, CLLocationsUpdatedEventArgs e)
		{
			var newLocation = e.Locations.Last();
			if (_currentLocation == null||newLocation.HorizontalAccuracy>_currentLocation.HorizontalAccuracy) {
				_currentLocation = newLocation;
				_landingPageView.SetLocation(_currentLocation);
			}
			else{_locationManager.StopUpdatingLocation();}
			
		}

		void OnLocationUpdated_Old (object sender, CLLocationUpdatedEventArgs e)
		{
			var locations = new CLLocation[]{e.OldLocation,e.NewLocation};
			OnLocationUpdated(sender,new CLLocationsUpdatedEventArgs(locations));
		}

		void OnFindButtonPress (object sender, EventArgs args){
			this._landingPageView.ShowFindNearby();
			_locationManager = new CLLocationManager();
			_locationManager.UpdatedLocation += this.OnLocationUpdated_Old;
			_locationManager.LocationsUpdated+=this.OnLocationUpdated;
			_locationManager.StartUpdatingLocation();

		}

		void goToMapView ()
		{
			var mapViewController = new NearbyEventViewController(this._landingPageView.MapView);
			this.PresentViewController(mapViewController,false,()=>{});
			this.Dispose();
		}

		void OnFindNearbyButtonPress (object sender, EventArgs e)
		{
			this._landingPageView.AnimateToFullMap(()=>this.goToMapView());
		}

		void OnBackButtonPress (object sender, EventArgs e)
		{
			this._locationManager.StopUpdatingLocation();
			this._landingPageView.HideFindNearby();
		}

		void UnwireEvents ()
		{
			_landingPageView.FindButtonPressed-=OnFindButtonPress;
			_landingPageView.BackButtonPressed-=OnBackButtonPress;
			_landingPageView.FindNearbyButtonPressed-=OnFindNearbyButtonPress;
		}

		protected override void Dispose (bool disposing)
		{
			UnwireEvents();
			this.View.Dispose();

		}
	}
}